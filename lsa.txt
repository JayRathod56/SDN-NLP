import pandas as pd
import numpy as np
from collections import Counter
from ordered_set import OrderedSet
d1= "The cow jumped over the moon"
d2 = "O'Leary's cow kicked the lamp"
d3= "The kicked lamp started a fire"
d4 = "The cow on fire"

def term_doc(*docs):
  dd = []
  for doc in docs:
    dd.append(list(map(lambda x : x.lower(), doc.split(' '))))
  counts = dict()
  for idx, doc in enumerate(dd):
    counts[idx] = Counter (doc)

  mat = pd.DataFrame (counts).replace(np.nan, 0)
  words= list(OrderedSet([word for doc in dd for word in doc]))
  return mat, words

mat, words = term_doc (d1, d2, d3, d4)
print(mat)

u, s, vt = np.linalg.svd (mat, full_matrices=False)
print(u,s,vt)

Ap=np.round(u, decimals=2)

def sim(w1, w2):
    idx_w1 = words.index(w1)
    idx_w2 = words.index(w2)

    dot = np.dot(Ap[idx_w1], Ap[idx_w2])
    div = len(Ap[idx_w1]) * len(Ap[idx_w2])
    return dot / div

similarity1 = sim('the', 'cow')
print("Similarity between 'the' and 'cow':", similarity1)

similarity2 = sim('the', 'over')
print("Similarity between 'the' and 'over':", similarity2)

similarity3 = sim('over', 'lamp')
print("Similarity between 'over' and 'lamp':", similarity3)


______________________________________________________________________________________________________

from nltk import *

d1 = "Left till here away at to whom past. Feelings laughing at no wondered repeated provided finished. It acceptance thoroughly my advantages everything as. Are projecting inquietude affronting preference saw who. Marry of am do avoid ample as. Old disposal followed she ignorant desirous two has. Called played entire roused though for one too. He into walk roof made tall cold he. Feelings way likewise addition wandered contempt bed indulged."
d2 = "Started several mistake joy say painful removed reached end. State burst think end are its. Arrived off she elderly beloved him affixed noisier yet. An course regard to up he hardly. View four has said does men saw find dear shy. Talent men wicket add garden."
d3 = "With my them if up many. Lain week nay she them her she. Extremity so attending objection as engrossed gentleman something. Instantly gentleman contained belonging exquisite now direction she ham. West room at sent if year. Numerous indulged distance old law you. Total state as merit court green decay he. Steepest sex bachelor the may delicate its yourself. As he instantly on discovery concluded to. Open draw far pure miss felt say yet few sigh."
d4 = "New had happen unable uneasy. Drawings can followed improved out sociable not. Earnestly so do instantly pretended. See general few civilly amiable pleased account carried. Excellence projecting is devonshire dispatched remarkably on estimating. Side in so life past. Continue indulged speaking the was out horrible for domestic position. Seeing rather her you not esteem men settle genius excuse. Deal say over you age from. Comparison new ham melancholy son themselves."
d5 = "For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
d6 = "Tolerably earnestly middleton extremely distrusts she boy now not. Add and offered prepare how cordial two promise. Greatly who affixed suppose but enquire compact prepare all put. Added forth chief trees but rooms think may. Wicket do manner others seemed enable rather in. Excellent own discovery unfeeling sweetness questions the gentleman. Chapter shyness matters mr parlors if mention thought."

words = ['joy','Arrived','intention','praise','course','extremely','wondered','merit','unpleasant','delicate']

# Term Document Matrix C

import numpy as np

C = np.zeros(60)
C = C.reshape(10,6)

count = 0
for i in words:
  if i in d1:
    C[count, 0] = 1
  if i in d2:
    C[count, 1] = 1
  if i in d3:
    C[count, 2] = 1
  if i in d4:
    C[count, 3] = 1
  if i in d5:
    C[count, 4] = 1
  if i in d6:
    C[count, 5] = 1

  count+=1

print("Term Document Matrix C: ")
C

# Term Document Matrix of the orignal code to verify only....

C = np.array([1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1]).reshape(5,6)

C

from scipy.linalg import svd

U, S, Vt = svd(C)

np.round(U, decimals=2), np.round(np.diag(S), decimals=2), np.round(Vt, decimals=2)

# Calculating SVD for the Term Document Matrix

u, s, vt = np.linalg.svd(C, full_matrices=False)

u, s, vt

np.round(u, decimals=2)

np.round(vt, decimals=2)

threshold = 1.5

# Zeroing out all but the two largest singular values of s to obtain s2

s[s < threshold] = 0

s2 = np.diag(s)

s2

# From the new singular values s2 we'll calculate C2


C2 = np.dot(s2,vt)

C2

# Truncated Matrix

s2[:2]

C2[:2]
